pluginManagement {
  def reactNativeGradlePlugin = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('@react-native/gradle-plugin/package.json', { paths: [require.resolve('react-native/package.json')] })")
    }.standardOutput.asText.get().trim()
  ).getParentFile().absolutePath
  includeBuild(reactNativeGradlePlugin)
  
  def expoPluginsPath = new File(
    providers.exec {
      workingDir(rootDir)
      commandLine("node", "--print", "require.resolve('expo-modules-autolinking/package.json', { paths: [require.resolve('expo/package.json')] })")
    }.standardOutput.asText.get().trim(),
    "../android/expo-gradle-plugin"
  ).absolutePath
  includeBuild(expoPluginsPath)

// Fallback: if the includeBuild paths above fail to resolve in some CI environments,
// also try to include them directly from node_modules.
def fallbackRnPlugin = new File(rootDir, "node_modules/@react-native/gradle-plugin")
if (fallbackRnPlugin.exists()) {
  try {
    includeBuild(fallbackRnPlugin.absolutePath)
  } catch (ignored) { println("warning: fallback includeBuild for react-native gradle plugin failed: ${ignored}") }
}

def fallbackExpoPlugin = new File(rootDir, "node_modules/expo-modules-autolinking/android/expo-gradle-plugin")
if (fallbackExpoPlugin.exists()) {
  try {
    includeBuild(fallbackExpoPlugin.absolutePath)
  } catch (ignored) { println("warning: fallback includeBuild for expo gradle plugin failed: ${ignored}") }
}
}

plugins {
  id("com.facebook.react.settings")
  id("expo-autolinking-settings")
}

// Fallback: if autolinking plugin is not picked up in some CI/packaging environments,
// try to apply the explicit autolinking script from node_modules.
def findUpwards = { File startDir, String relativePath, int maxLevels = 3 ->
  def dir = startDir
  for (i in 0..maxLevels) {
    def candidate = new File(dir, relativePath)
    if (candidate.exists()) return candidate
    dir = dir.parentFile
    if (dir == null) break
  }
  return null
}

def expoAutolinkingScript = findUpwards(rootDir, "node_modules/expo/scripts/autolinking.gradle", 5)
if (expoAutolinkingScript != null) {
  try {
    apply from: expoAutolinkingScript
    println("info: applied expo autolinking script from ${expoAutolinkingScript}")
  } catch (ignored) { println("warning: applying expo autolinking script failed: ${ignored}") }
} else {
  println("info: expo autolinking script not found in project or parent node_modules")
}

extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
  if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
    ex.autolinkLibrariesFromCommand()
  } else {
    // expoAutolinking may not be defined in some environments; guard access
    if (this.hasProperty('expoAutolinking')) {
      ex.autolinkLibrariesFromCommand(expoAutolinking.rnConfigCommand)
    } else {
      println('warning: expoAutolinking not found; falling back to default autolink')
      ex.autolinkLibrariesFromCommand()
    }
  }
}
if (this.hasProperty('expoAutolinking')) {
  expoAutolinking.useExpoModules()
} else {
  println('warning: expoAutolinking plugin not applied; continue without expo-specific autolinking')
}

rootProject.name = 'PMSMobileApp'

if (this.hasProperty('expoAutolinking')) {
  expoAutolinking.useExpoVersionCatalog()
} else {
  println('warning: expoAutolinking not available; skipping version catalog setup')
}

include ':app'
if (this.hasProperty('expoAutolinking')) {
  try {
    includeBuild(expoAutolinking.reactNativeGradlePlugin)
  } catch (ignored) {
    println("warning: could not include expo reactNativeGradlePlugin: ${ignored}")
  }
} else {
  println('warning: expoAutolinking not available; skipping reactNativeGradlePlugin includeBuild')
}
